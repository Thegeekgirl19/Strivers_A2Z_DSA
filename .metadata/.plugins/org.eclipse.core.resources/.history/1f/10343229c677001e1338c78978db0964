package com.ezdi.ocr.pdftotext.highlight;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.imageio.ImageIO;
import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import com.ezdi.ocr.dto.common.Line;
import com.ezdi.ocr.dto.pdftotext.DualIdentifiedPage;
import com.ezdi.ocr.dto.pdftotext.Page;
import com.ezdi.ocr.highlight.Highlighter;
import com.ezdi.ocr.pdf.loader.PdfLoader;
import com.ezdi.ocr.pdftotext.loader.PdfToTextHtmlLoaderNew;
import com.ezdi.ocr.pdftotext.separator.ColumnSeparator;
import com.ezdi.ocr.pdftotext.separator.PdfToTextTextGenerator;

class PDFProcessingCallable implements Runnable
{
	private String	filePath;
	private String	text;

	public PDFProcessingCallable(String filePath, String text)
	{
		this.filePath = filePath;
		this.text = text;
	}

	@Override
	public void run()
	{
		try
		{
			processPDFDualColumns();
		}
		catch (IOException | SAXException | ParserConfigurationException e)
		{
			e.printStackTrace();
			System.err.println(filePath + " Failed");
		}
	}

	private void processPDFDualColumns() throws IOException, SAXException, ParserConfigurationException
	{
		System.out.println(filePath);
		String pdf = filePath + ".pdf";
		String html = filePath.replace("/PDF/", "/HTML/") + ".html";

		List<Page> pages = new PdfToTextHtmlLoaderNew().loadPages(html);

		List<DualIdentifiedPage> correctedPages = ColumnSeparator.getCorrectedPages(pages);

		double separatorX = ColumnSeparator.getVerticalLineXCoordinate(pages);

		for (DualIdentifiedPage page : correctedPages)
		{
			int pageNum = page.getIndex();
			System.out.println(pageNum);

			BufferedImage bim = PdfLoader.getPageImage(new File(pdf), pageNum);
			Graphics2D g2d = bim.createGraphics();

			g2d.setStroke(new BasicStroke(2));

			Highlighter.drawQuadrilateralOnImage(g2d, Color.BLUE, ColumnSeparator.getIdentifierVertices(separatorX), bim.getWidth(), bim.getHeight());

			for (Line block : page.getLeft())
			{
				Highlighter.drawQuadrilateralOnImage(g2d, Color.GREEN, block.getVertices(), bim.getWidth(), bim.getHeight());
			}
			for (Line block : page.getRight())
			{
				Highlighter.drawQuadrilateralOnImage(g2d, Color.RED, block.getVertices(), bim.getWidth(), bim.getHeight());
			}
			for (Line block : page.getOther())
			{
				Highlighter.drawQuadrilateralOnImage(g2d, Color.BLUE, block.getVertices(), bim.getWidth(), bim.getHeight());
			}

			g2d.dispose();
			ImageIO.write(bim, "png", new File(filePath + "_Page_" + pageNum + "_Dual4.png"));
		}

		FileWriter fw = new FileWriter(text);
		for (String line : PdfToTextTextGenerator.printCorrectedText(correctedPages))
		{
			fw.write(line);
			fw.write("\n");
		}
		fw.close();
	}
}

public class PdfToTextBlockDualColumnExecutor
{
	public static void main(String[] args) throws IOException, SAXException
	{
		ExecutorService executor = Executors.newFixedThreadPool(30);

		for (File file : new File("/home/vivekkumar/EandMTXT/PEP_PDF/PDF/").listFiles())
		{
			if (!file.getName().endsWith(".pdf"))
			{
				continue;
			}

			String fileName = file.getAbsolutePath().replace(".pdf", "");

			String text = "/home/vivekkumar/EandMTXT/PEP_PDF/Text5/" + file.getName().replace(".pdf", ".txt");

			Runnable work = new PDFProcessingCallable(fileName, text);
			executor.submit(work);
		}

		executor.shutdown();
	}

}
