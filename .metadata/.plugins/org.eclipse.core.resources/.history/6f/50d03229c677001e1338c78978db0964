package com.ezdi.ocr.pdftotext.loader;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;

import com.ezdi.ocr.dto.common.Line;
import com.ezdi.ocr.dto.common.Point;
import com.ezdi.ocr.dto.common.Word;
import com.ezdi.ocr.dto.pdftotext.Block;
import com.ezdi.ocr.dto.pdftotext.Page;
import com.ezdi.ocr.dto.pdftotext.Paragraph;

public class PdfToTextHtmlLoader
{
	private static DocumentBuilder	documentBuilder	= null;
	private static int				counter			= 0;

	static
	{
		try
		{
			DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilderFactory.setIgnoringElementContentWhitespace(false);
			documentBuilderFactory.setIgnoringComments(false);
			documentBuilderFactory.setCoalescing(false);
			documentBuilderFactory.setExpandEntityReferences(true);
			documentBuilderFactory.setValidating(false);
			documentBuilderFactory.setNamespaceAware(true);
			documentBuilderFactory.setFeature("http://xml.org/sax/features/namespaces", false);
			documentBuilderFactory.setFeature("http://xml.org/sax/features/validation", false);
			documentBuilderFactory.setFeature("http://apache.org/xml/features/nonvalidating/load-dtd-grammar", false);
			documentBuilderFactory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);

			//		documentBuilderFactory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
			// or completely disable external entities declarations:
			documentBuilderFactory.setFeature("http://xml.org/sax/features/external-general-entities", false);
			documentBuilderFactory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
			// or prohibit the use of all protocols by external entities:
			documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
			documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
			// or disable entity expansion but keep in mind that this doesn't prevent fetching external entities
			// and this solution is not correct for OpenJDK < 13 due to a bug: https://bugs.openjdk.java.net/browse/JDK-8206132
			documentBuilderFactory.setExpandEntityReferences(false);

			documentBuilder = documentBuilderFactory.newDocumentBuilder();
		}
		catch (ParserConfigurationException e)
		{
			e.printStackTrace();
		}
	}

	public static List<Page> loadPages(String xmlPath) throws SAXException, IOException
	{
		counter = 1;
		Document document = documentBuilder.parse(xmlPath);
		document.getDocumentElement().normalize();

		/** Retrieve document element, i.e. element named "ezNLP" from document */
		Element documentElement = document.getDocumentElement();

		return parseChildren(documentElement);
	}

	private static List<Page> parseChildren(Element element)
	{
		// <doc>
		List<Page> pages = new ArrayList<>();
		for (Node node = element.getFirstChild(); node != null; node = node.getNextSibling())
		{
			if (node.getNodeType() == Node.ELEMENT_NODE)
			{
				Element nodeElement = (Element) node;

				if ("page".equals(nodeElement.getNodeName()))
				{
					pages.add(parsePageElement(nodeElement));
				}
				else
				{
					pages.addAll(parseChildren(nodeElement));
				}
			}
		}

		return pages;
	}

	private static Page parsePageElement(Element element)
	{
		// <page width="612.000000" height="792.000000">
		double width = Double.parseDouble(element.getAttribute("width"));
		double height = Double.parseDouble(element.getAttribute("height"));

		List<Block> blocks = new ArrayList<>();
		for (Node node = element.getFirstChild(); node != null; node = node.getNextSibling())
		{
			if (node.getNodeType() == Node.ELEMENT_NODE)
			{
				Element nodeElement = (Element) node;

				if ("flow".equals(nodeElement.getNodeName()))
				{
					Block block = parseBlockElement(nodeElement, width, height);
					if (block != null)
					{
						blocks.add(block);
					}
				}
			}
		}

		return new Page(counter++, width, height, blocks);
	}

	private static Block parseBlockElement(Element element, double width, double height)
	{
		// <flow>
		List<Paragraph> paragraphs = new ArrayList<>();
		for (Node node = element.getFirstChild(); node != null; node = node.getNextSibling())
		{
			if (node.getNodeType() == Node.ELEMENT_NODE)
			{
				Element nodeElement = (Element) node;

				if ("block".equals(nodeElement.getNodeName()))
				{
					Paragraph para = parseParagraphElement(nodeElement, width, height);
					if (para != null)
					{
						paragraphs.add(para);
					}
				}
			}
		}
		if (paragraphs.isEmpty())
		{
			return null;
		}

		return new Block(paragraphs);
	}

	private static Paragraph parseParagraphElement(Element element, double width, double height)
	{
		// <block xMin="245.503006" yMin="36.461976" xMax="349.163006" yMax="48.737976">
		List<Line> lines = new ArrayList<>();
		for (Node node = element.getFirstChild(); node != null; node = node.getNextSibling())
		{
			if (node.getNodeType() == Node.ELEMENT_NODE)
			{
				Element nodeElement = (Element) node;

				if ("line".equals(nodeElement.getNodeName()))
				{
					Line line = parseLineElement(nodeElement, width, height);
					if (line != null)
					{
						lines.add(line);
					}
				}
			}
		}
		if (lines.isEmpty())
		{
			return null;
		}

		return new Paragraph(getVertices(element, width, height), lines);
	}

	private static Line parseLineElement(Element element, double width, double height)
	{
		// <line xMin="245.503006" yMin="36.461976" xMax="349.163006" yMax="48.737976">
		List<Word> words = new ArrayList<>();
		for (Node node = element.getFirstChild(); node != null; node = node.getNextSibling())
		{
			if (node.getNodeType() == Node.ELEMENT_NODE)
			{
				Element nodeElement = (Element) node;

				if ("word".equals(nodeElement.getNodeName()))
				{
					Word word = parseWordElement(nodeElement, width, height);
					if (word != null)
					{
						words.add(word);
					}
				}
			}
		}

		if (words.isEmpty())
		{
			return null;
		}
		return new Line(getVertices(element, width, height), words);
	}

	private static Word parseWordElement(Element element, double width, double height)
	{
		// <word xMin="290.418010" yMin="56.669983" xMax="317.088010" yMax="67.829983">Hardy</word>
		List<Point> vertices = getVertices(element, width, height);
		if (vertices.isEmpty())
		{
			return null;
		}

		return new Word(vertices, element.getTextContent());
	}

	private static List<Point> getVertices(Element element, double width, double height)
	{
		double xMin = Double.parseDouble(element.getAttribute("xMin")) / width;
		double yMin = Double.parseDouble(element.getAttribute("yMin"));
		double xMax = Double.parseDouble(element.getAttribute("xMax")) / width;
		double yMax = Double.parseDouble(element.getAttribute("yMax"));

		List<Point> vertices = new ArrayList<>();

		//		// Page wise, Move to columnseparator
		//		if (yMin >= 709.0
		//				|| yMax <= 130.0)
		//
		//		{
		//			return vertices;
		//		}

		yMin = yMin / height;
		yMax = yMax / height;

		vertices.add(new Point(xMin, yMin));
		vertices.add(new Point(xMax, yMin));
		vertices.add(new Point(xMax, yMax));
		vertices.add(new Point(xMin, yMax));
		return vertices;
	}
}
