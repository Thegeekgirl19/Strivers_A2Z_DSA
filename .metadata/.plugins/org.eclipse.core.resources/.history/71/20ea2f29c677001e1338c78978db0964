package com.ezdi.ocr.dto.common;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import com.amazonaws.services.textract.model.Block;
import com.amazonaws.services.textract.model.BoundingBox;
import com.amazonaws.services.textract.model.Geometry;
import com.amazonaws.services.textract.model.Point;
import com.amazonaws.services.textract.model.Relationship;

public class Utils
{
	public static Block cloneBlock(Block googleBlock)
	{
		Block newBlock = new Block();
		newBlock.setBlockType(googleBlock.getBlockType());
		newBlock.setColumnIndex(googleBlock.getColumnIndex());
		newBlock.setColumnSpan(googleBlock.getColumnSpan());
		newBlock.setConfidence(googleBlock.getConfidence());
		newBlock.setGeometry(cloneGeometry(googleBlock.getGeometry()));
		newBlock.setId(googleBlock.getId());
		newBlock.setPage(googleBlock.getPage());
		newBlock.setRelationships(cloneRelationships(googleBlock.getRelationships()));
		newBlock.setRowIndex(googleBlock.getRowIndex());
		newBlock.setRowSpan(googleBlock.getRowSpan());
		//		newBlock.setText(googleBlock.getText());
		return newBlock;
	}

	private static List<Relationship> cloneRelationships(List<Relationship> relationships)
	{
		List<Relationship> newRels = new ArrayList<>();

		if (relationships == null)
		{
			return newRels;
		}
		for (Relationship rel : relationships)
		{
			newRels.add(cloneRelationship(rel));
		}
		return newRels;
	}

	private static Relationship cloneRelationship(Relationship rel)
	{
		Relationship newRel = new Relationship();
		newRel.setIds(new ArrayList<>(rel.getIds()));
		newRel.setType(rel.getType());
		return newRel;
	}

	private static Geometry cloneGeometry(Geometry geometry)
	{
		Geometry newGeometry = new Geometry();
		newGeometry.setBoundingBox(cloneBoundingBox(geometry.getBoundingBox()));
		newGeometry.setPolygon(clonePoints(geometry.getPolygon()));

		return newGeometry;
	}

	private static BoundingBox cloneBoundingBox(BoundingBox boundingBox)
	{
		BoundingBox newBb = new BoundingBox();
		newBb.setHeight(boundingBox.getHeight());
		newBb.setLeft(boundingBox.getLeft());
		newBb.setTop(boundingBox.getTop());
		newBb.setWidth(boundingBox.getWidth());
		return newBb;
	}

	private static List<Point> clonePoints(List<Point> polygon)
	{
		List<Point> newPolygon = new ArrayList<>();
		for (Point point : polygon)
		{
			newPolygon.add(clonePoint(point));
		}
		return newPolygon;
	}

	private static Point clonePoint(Point point)
	{
		Point newPoint = new Point();
		newPoint.setX(point.getX());
		newPoint.setY(point.getY());
		return newPoint;
	}

	public static Set<Block> getCustomComparatorTreeSet()
	{
		return new TreeSet<>(new Comparator<Block>()
		{
			@Override
			public int compare(Block o1, Block o2)
			{
				//				System.out.println(o1.getGeometry().getPolygon());
				//				System.out.println(o2.getGeometry().getPolygon());
				//
				//				System.out.println(o1.getText());
				//				System.out.println(o2.getText());

				Point o1TopLeft = o1.getGeometry().getPolygon().get(0);
				Point o2TopLeft = o2.getGeometry().getPolygon().get(0);

				//				Point o1BottomRight = o1.getGeometry().getPolygon().get(3);
				//				Point o2BottomRight = o2.getGeometry().getPolygon().get(3);
				//
				//				double maxY = Math.max(o2BottomRight.getY(), o1BottomRight.getY());
				//				double minY = Math.min(o2TopLeft.getY(), o1TopLeft.getY());
				//
				//				double denom = Math.abs(maxY - minY);
				//				double numer = Math.abs(o2BottomRight.getY() - o1BottomRight.getY());
				//				numer = numer + Math.abs(o2TopLeft.getY() - o1TopLeft.getY());
				//
				//				System.out.println(denom);
				//				System.out.println(numer);
				//
				//				double ratio = numer / denom;
				//				System.out.println(ratio);
				//				if (ratio > 0.2)
				//				{
				int compareY = Double.compare(o1TopLeft.getY(), o2TopLeft.getY());
				if (compareY != 0)
				{
					return compareY;
				}
				//				}
				else
				{
					int compareX = Double.compare(o1TopLeft.getX(), o2TopLeft.getX());
					if (compareX != 0)
					{
						return compareX;
					}
				}

				return 0;
			}
		});

	}

	public static int compare(Block o1, Block o2)
	{
		//				System.out.println(o1.getGeometry().getPolygon());
		//				System.out.println(o2.getGeometry().getPolygon());
		//
		//				System.out.println(o1.getText());
		//				System.out.println(o2.getText());

		Point o1TopLeft = o1.getGeometry().getPolygon().get(0);
		Point o2TopLeft = o2.getGeometry().getPolygon().get(0);

		//				Point o1BottomRight = o1.getGeometry().getPolygon().get(3);
		//				Point o2BottomRight = o2.getGeometry().getPolygon().get(3);
		//
		//				double maxY = Math.max(o2BottomRight.getY(), o1BottomRight.getY());
		//				double minY = Math.min(o2TopLeft.getY(), o1TopLeft.getY());
		//
		//				double denom = Math.abs(maxY - minY);
		//				double numer = Math.abs(o2BottomRight.getY() - o1BottomRight.getY());
		//				numer = numer + Math.abs(o2TopLeft.getY() - o1TopLeft.getY());
		//
		//				System.out.println(denom);
		//				System.out.println(numer);
		//
		//				double ratio = numer / denom;
		//				System.out.println(ratio);
		//				if (ratio > 0.2)
		//				{
		int compareY = Double.compare(o1TopLeft.getY(), o2TopLeft.getY());
		if (compareY != 0)
		{
			return compareY;
		}
		//				}
		else
		{
			int compareX = Double.compare(o1TopLeft.getX(), o2TopLeft.getX());
			if (compareX != 0)
			{
				return compareX;
			}
		}

		return 0;
	}

	public static List<Block> getOnlyRequiredTableBlocks(List<Block> amazonBlocks, Map<String, Block> idBlockMap)
	{
		List<Block> set = new ArrayList<>();
		for (Block amazonBlock : amazonBlocks)
		{
			if (!amazonBlock.getBlockType().equalsIgnoreCase("TABLE"))
			{
				continue;
			}

			int tableCols = getTableColumns(amazonBlock, idBlockMap);
			if (tableCols < 2)
			{
				continue;
			}

			//			if (tableCols == 2
			//					&& !isValidTableForShortText(amazonBlock, idBlockMap))
			//			{
			//				continue;
			//			}

			set.add(amazonBlock);
		}

		return set;
	}

	//	private static boolean isValidTableForShortText(Block amazonBlock, Map<String, Block> idBlockMap)
	//	{
	//		List<Block> finalBlock = new ArrayList<Block>();
	//		finalBlock.add(amazonBlock);
	//		Page pageData = new Page(0, finalBlock);
	//		//		String tableData = pageData.getText();
	//
	//		String[] lines = pageData.getText().split("\n");
	//
	//		//		double avg = 0.0;
	//		int maxLen = 0;
	//		for (String line : lines)
	//		{
	//			for (String cell : line.split("\\|"))
	//			{
	//				//			avg = avg + line.length();
	//				maxLen = Math.max(maxLen, cell.length());
	//			}
	//		}
	//		//		avg = avg / lines.length;
	//
	//		return maxLen < 75;
	//	}

	//	private static boolean containsDemographicDetail(Block amazonBlock, Map<String, Block> idBlockMap)
	//	{
	//		List<Block> finalBlock = new ArrayList<Block>();
	//		finalBlock.add(amazonBlock);
	//		PageData pageData = new PageData(0, idBlockMap, finalBlock);
	//		String tableData = pageData.getText();
	//
	//		boolean demographicPresent = false;
	//
	//		String accountRegex = "(MEDICAL RECORD|PATIENT ID\\/MRN|PATIENT ID|PATIENT MRN|Account Number|Acc No|MRN|ACT)";
	//		java.util.regex.Pattern mrn_pattern = java.util.regex.Pattern.compile(accountRegex, java.util.regex.Pattern.CASE_INSENSITIVE);
	//		java.util.regex.Matcher matcher = mrn_pattern.matcher(tableData.trim());
	//		if (matcher.find())
	//		{
	//			demographicPresent = true;
	//		}
	//
	//		return demographicPresent;
	//	}

	private static int getTableColumns(Block amazonBlock, Map<String, Block> idBlockMap)
	{
		int maxCol = 0;
		for (String id : Utils.getChildRelationshipIds(amazonBlock.getRelationships()))
		{
			Block cellBlock = idBlockMap.get(id);
			maxCol = Math.max(maxCol, cellBlock.getColumnIndex());
		}

		return maxCol;
	}

	public static List<String> getChildRelationshipIds(List<Relationship> relationships)
	{
		if (relationships == null)
		{
			return Collections.emptyList();
		}

		List<String> ids = new ArrayList<>();
		for (Relationship rel : relationships)
		{
			if (!"CHILD".equalsIgnoreCase(rel.getType()))
			{
				continue;
			}
			ids.addAll(rel.getIds());
		}

		return ids;
	}

	//	public static List<Point> getMinMaxPoints(Block block, Map<String, Block> idBlockMap)
	//	{
	//		if (block.getBlockType().equalsIgnoreCase("CELL"))
	//		{
	//			List<Relationship> rels = block.getRelationships();
	//			String blockText = block.getText();
	//			if ((rels == null
	//					|| rels.isEmpty())
	//					&& (blockText == null
	//							|| blockText.isEmpty()))
	//			{
	//				Point point = new Point();
	//				point.setX(0.0f);
	//				point.setY(0.0f);
	//
	//				List<Point> points = new ArrayList<>();
	//				points.add(point);
	//				points.add(point);
	//				return points;
	//			}
	//
	//			return getMinMaxPointsFromCellChildren(Utils.getChildRelationshipIds(rels), idBlockMap);
	//		}
	//
	//		return getMinMaxPoints(block.getGeometry().getPolygon());
	//	}
	//
	//	private static List<Point> getMinMaxPointsFromCellChildren(List<String> childRelationshipIds, Map<String, Block> idBlockMap)
	//	{
	//		List<Point> allPoints = new ArrayList<>();
	//		for (String id : childRelationshipIds)
	//		{
	//			allPoints.addAll(idBlockMap.get(id).getGeometry().getPolygon());
	//		}
	//
	//		return getMinMaxPoints(allPoints);
	//	}
	//
	//	private static List<Point> getMinMaxPoints(List<Point> points)
	//	{
	//		float minX = Float.MAX_VALUE;
	//		float minY = Float.MAX_VALUE;
	//
	//		float maxX = Float.MIN_VALUE;
	//		float maxY = Float.MIN_VALUE;
	//
	//		for (Point selfP : points)
	//		{
	//			minX = Math.min(selfP.getX(), minX);
	//			minY = Math.min(selfP.getY(), minY);
	//
	//			maxX = Math.max(selfP.getX(), maxX);
	//			maxY = Math.max(selfP.getY(), maxY);
	//		}
	//
	//		List<Point> newPoints = new ArrayList<>();
	//
	//		Point minPoint = new Point();
	//		minPoint.setX(minX);
	//		minPoint.setY(minY);
	//		newPoints.add(minPoint);
	//
	//		Point maxPoint = new Point();
	//		maxPoint.setX(maxX);
	//		maxPoint.setY(maxY);
	//		newPoints.add(maxPoint);
	//
	//		return newPoints;
	//	}
}
