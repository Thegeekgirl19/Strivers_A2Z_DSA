package com.ezdi.ocr.dto.common;

import java.util.ArrayList;
import java.util.List;

public class BoundingBox
{
	List<Point>			vertices;
	double				minX		= Double.MAX_VALUE;
	double				minY		= Double.MAX_VALUE;
	double				maxX		= Double.MIN_VALUE;
	double				maxY		= Double.MIN_VALUE;

	BlockType			type;
	int					columns;
	int					rows;

	List<BoundingBox>	children	= new ArrayList<>();;

	public BoundingBox(List<Point> vertices, BlockType type)
	{
		this.vertices = vertices;
		for (Point p : vertices)
		{
			minX = Math.min(p.getX(), minX);
			maxX = Math.max(p.getX(), maxX);
			minY = Math.min(p.getY(), minY);
			maxY = Math.max(p.getY(), maxY);
		}

		this.type = type;
	}

	public void setColumns(int columns)
	{
		this.columns = columns;
	}

	public void setRows(int rows)
	{
		this.rows = rows;
	}

	public int getColumns()
	{
		return columns;
	}

	public int getRows()
	{
		return rows;
	}

	public List<Point> getVertices()
	{
		return vertices;
	}

	public BlockType getType()
	{
		return type;
	}

	public boolean contains(Point p)
	{
		if (p.getX() < minX
				|| p.getX() > maxX
				|| p.getY() < minY
				|| p.getY() > maxY)
		{
			return false;
		}

		boolean isInside = false;
		for (int i = 0, j = vertices.size() - 1; i < vertices.size(); j = i++)
		{
			if ((vertices.get(i).getY() > p.getY()) != (vertices.get(j).getY() > p.getY())
					&& p.getX() < (vertices.get(j).getX() - vertices.get(i).getX()) * (p.getY() - vertices.get(i).getY())
							/ (vertices.get(j).getY() - vertices.get(i).getY()) + vertices.get(i).getX())
			{
				isInside = !isInside;
			}
		}

		return isInside;
	}

	public void addChild(BoundingBox child)
	{
		if (this.children == null)
		{
			this.children = new ArrayList<>();
		}
		this.children.add(child);

	}

	public List<BoundingBox> getChildren()
	{
		return children;
	}

	public BoundingBox clone()
	{
		BoundingBox clone = new BoundingBox(vertices, type);
		clone.setColumns(columns);
		clone.setRows(rows);

		for (BoundingBox child : this.children)
		{
			clone.addChild(child.clone());
		}

		return clone;

	}
}